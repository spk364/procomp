name: API CI

on:
  push:
    branches: [main]
    paths:
      - 'apps/api/**'
      - '.github/workflows/api-ci.yml'
  pull_request:
    paths:
      - 'apps/api/**'
      - '.github/workflows/api-ci.yml'

permissions:
  contents: read
  packages: write

concurrency:
  group: api-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test (pytest)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: procomp_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d procomp_test"
          --health-interval=10s --health-timeout=5s --health-retries=10
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 5s --health-timeout 3s --health-retries 20
    env:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/procomp_test
      SUPABASE_URL: http://localhost
      SUPABASE_JWT_SECRET: dev-secret
      SUPABASE_SERVICE_KEY: dev-secret
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: apps/api/pyproject.toml

      - name: Pip cache directory
        run: echo "PIP_CACHE_DIR=${HOME}/.cache/pip" >> $GITHUB_ENV

      - name: Install API dependencies
        working-directory: apps/api
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      - name: Create wait-for-services script
        run: |
          cat > scripts/wait-for-services.sh <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          echo "Waiting for Postgres..."
          for i in {1..60}; do
            pg_isready -h localhost -p 5432 -U postgres >/dev/null 2>&1 && break || sleep 2
          done
          echo "Waiting for Redis..."
          for i in {1..60}; do
            (echo PING | nc -w 1 localhost 6379 | grep -q PONG) && break || sleep 2
          done
          echo "Services are ready"
          EOF
          chmod +x scripts/wait-for-services.sh

      - name: Wait for DB/Redis health
        run: ./scripts/wait-for-services.sh

      - name: Run pytest
        working-directory: .
        env:
          PYTHONUNBUFFERED: '1'
        run: |
          pytest -q --maxfail=1 --disable-warnings

  docker:
    name: Build and Push GHCR Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          file: ./apps/api/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/procomp-api:latest
            ghcr.io/${{ github.repository_owner }}/procomp-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Railway (api)
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && vars.RAILWAY_DEPLOY_API == 'true' && secrets.RAILWAY_TOKEN != '' && secrets.RAILWAY_PROJECT_ID != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Railway CLI
        run: npm i -g @railway/cli

      - name: Link Railway project
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
        run: |
          railway --version
          railway link --project $RAILWAY_PROJECT_ID

      - name: Deploy service api
        working-directory: apps/api
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway up --service api --detach