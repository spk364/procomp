name: E2E Tests

on:
  pull_request:
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'tests/**'
      - '.github/workflows/e2e.yml'
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: e2e-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: procomp_e2e
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d procomp_e2e" 
          --health-interval=10s --health-timeout=5s --health-retries=10
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 5s --health-timeout 3s --health-retries 20

    env:
      DATABASE_URL_PRISMA: postgresql://postgres:postgres@localhost:5432/procomp_e2e
      DATABASE_URL_API: postgresql+asyncpg://postgres:postgres@localhost:5432/procomp_e2e
      SUPABASE_URL: http://localhost
      SUPABASE_JWT_SECRET: dev-secret
      SUPABASE_SERVICE_KEY: dev-secret
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8000
      NEXT_PUBLIC_API_WS_URL: ws://localhost:8000

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Install workspace deps
        run: pnpm install --frozen-lockfile

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: apps/api/pyproject.toml

      - name: Install API deps
        working-directory: apps/api
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      - name: Generate Prisma client
        run: pnpm db:generate:root

      - name: Push DB schema
        env:
          DATABASE_URL: ${{ env.DATABASE_URL_PRISMA }}
        run: pnpm db:push

      - name: Seed DB
        env:
          DATABASE_URL: ${{ env.DATABASE_URL_PRISMA }}
        run: pnpm seed:staging

      - name: Start API
        working-directory: apps/api
        env:
          DATABASE_URL: ${{ env.DATABASE_URL_API }}
          ENVIRONMENT: development
          SUPABASE_URL: ${{ env.SUPABASE_URL }}
          SUPABASE_JWT_SECRET: ${{ env.SUPABASE_JWT_SECRET }}
          SUPABASE_SERVICE_KEY: ${{ env.SUPABASE_SERVICE_KEY }}
          LOG_LEVEL: INFO
        run: |
          nohup python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 >/tmp/api.log 2>&1 &
          for i in {1..60}; do curl -fsS http://localhost:8000/livez && break || sleep 2; done
          echo 'API logs:' && tail -n +1 /tmp/api.log | sed -n '1,200p'

      - name: Build Web
        working-directory: apps/web
        env:
          NEXT_TELEMETRY_DISABLED: '1'
        run: pnpm build

      - name: Start Web
        working-directory: apps/web
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ env.NEXT_PUBLIC_API_BASE_URL }}
          NEXT_PUBLIC_API_WS_URL: ${{ env.NEXT_PUBLIC_API_WS_URL }}
        run: |
          nohup pnpm start -- -p 3000 >/tmp/web.log 2>&1 &
          for i in {1..60}; do curl -fsS http://localhost:3000 && break || sleep 2; done
          echo 'Web logs:' && tail -n +1 /tmp/web.log | sed -n '1,200p'

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        working-directory: apps/web
        env:
          BASE_URL: http://localhost:3000
        run: pnpm -s exec playwright test

      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: apps/web/playwright-report
          if-no-files-found: ignore

      - name: Upload Playwright Videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-videos
          path: apps/web/test-results
          if-no-files-found: ignore