name: web-ci

on:
  pull_request:
  push:
    branches: [main]

concurrency:
  group: web-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  install_build_test:
    name: Install, Lint, Typecheck, Build (web)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Typecheck
        run: pnpm run typecheck || pnpm run type-check

      - name: Lint
        run: pnpm run lint

      - name: Build
        run: pnpm run build

      - name: Upload web build artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build-${{ github.sha }}
          path: |
            apps/web/.next
            apps/web/package.json
            pnpm-lock.yaml
          if-no-files-found: warn
          retention-days: 7

  preview_deploy:
    if: github.event_name == 'pull_request'
    needs: install_build_test
    name: Preview Deploy to Vercel (web)
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Install Vercel CLI
        run: pnpm dlx vercel@latest --version

      - name: Vercel pull (preview)
        working-directory: apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: pnpm dlx vercel pull --yes --environment=preview --token=$VERCEL_TOKEN

      - name: Create Vercel preview deployment
        id: vercel_deploy
        working-directory: apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          url=$(pnpm -s dlx vercel deploy --token=$VERCEL_TOKEN --scope $VERCEL_ORG_ID --yes --prod=false | tail -n1)
          echo "preview_url=$url" >> $GITHUB_OUTPUT

      - name: Comment preview URL on PR
        uses: actions/github-script@v7
        with:
          script: |
            const url = process.env.PREVIEW_URL;
            const body = `Vercel preview deployment: ${url}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
        env:
          PREVIEW_URL: ${{ steps.vercel_deploy.outputs.preview_url }}

  prod_deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: install_build_test
    name: Production Deploy to Vercel (web)
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Install Vercel CLI
        run: pnpm dlx vercel@latest --version

      - name: Vercel pull (production)
        working-directory: apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: pnpm dlx vercel pull --yes --environment=production --token=$VERCEL_TOKEN

      - name: Deploy to production
        working-directory: apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: pnpm -s dlx vercel deploy --prod --token=$VERCEL_TOKEN --scope $VERCEL_ORG_ID --yes